{"version":3,"sources":["components/NavbarComponent.jsx","components/MainComponent.jsx","components/modals/ViewModalComponent.jsx","components/modals/EditModalComponent.jsx","components/modals/CreateModalComponent.jsx","components/modals/DeleteModalComponent.jsx","App.js","reportWebVitals.js","index.js","modules/axiosErrorMessage.js","modules/axiosResponseMessage.js","modules/objectCreator.js"],"names":["NavbarComponent","renderAgentProp","setRenderAgentProp","Navbar","className","expand","Container","fluid","Brand","href","id","Toggle","aria-controls","Collapse","Row","Nav","Link","data-bs-toggle","data-bs-target","icon","faPlus","target","faGithub","MainComponent","useState","repositories","setRepositories","repoId","repoName","repoDescription","repoUrl","repoWebsiteUrl","repoTopics","repoBranches","repoCommits","repoHasLicense","repoHasReadme","modalData","setModalData","useEffect","a","fetch","response","json","dataArr","console","error","repoNameReceiverFunc","selectedRepoName","repo","name","description","url","website_url","topics","branches","commits","has_license","has_readme","map","repository","index","title","type","onClick","faTrash","faPen","faEye","modalDataProp","setModalDataProp","repositoriesProp","setRepositoriesProp","ViewModalComponent","tabIndex","aria-labelledby","aria-hidden","data-bs-dismiss","aria-label","Object","keys","topic","branch","EditModalComponent","newTopic","setNewTopic","newBranch","setNewBranch","repoHasLicenseChangeHandler","prevState","repoHasReadmeChangeHandler","saveChangesBtnHandler","newObject","objectCreator","moduleFunc","axios","put","then","res","axiosResponseMessage","catch","err","axiosErrorMessage","setTimeout","role","placeholder","value","onChange","event","htmlFor","length","faTimesCircle","selectedRepoTopic","arr","filter","repoTopic","repoTopicsChangeHandler","aria-describedby","match","selectedRepoBranch","repoBranch","repoBranchesChangeHandler","checked","CreateModalComponent","field","setField","createRepoHasLicenseChangeHandler","createRepoHasReadmeChangeHandler","createProjectBtnHandler","post","DeleteModalComponent","deleteProjectBtnHandler","delete","App","renderAgent","setRenderAgent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","exports","log","status","data","receivedObject"],"mappings":"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","file":"static/js/main.a80035d5.chunk.js","sourcesContent":["import {Navbar, Container, Nav, Row} from 'react-bootstrap';\nimport './NavbarComponent.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faPlus} from '@fortawesome/free-solid-svg-icons';\nimport {faGithub} from '@fortawesome/free-brands-svg-icons';\nimport {CreateModalComponent} from '../components';\n\n/* \n  * I imported the Navbar, Container, Nav, Row components from react-bootstrap.\n  * I imported the css style file i.e NavbarComponent.css.\n  * I imported the FontAwesomeIcon component and faPlus icon which are all products of the font-awesome library.\n  * I imported the CreateModalComponent component from the components folder.\n*/\n\nconst NavbarComponent = ({renderAgentProp, setRenderAgentProp}) => {\n\n  return (\n    <>\n      <Navbar className=\"nav-class\" expand=\"sm\">\n        <Container fluid>\n          {/* Application Name */}\n          <Navbar.Brand href=\"#\" id=\"brand-id\">EmmetHub Projects</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" id=\"navbar-toggler\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Container>\n              <Row>\n                <Nav className=\"me-auto\">\n                  <ul className=\"navbar-nav me-auto mb-2 mb-sm-0\">           \n                  </ul>\n                  <ul className=\"d-flex navbar-nav me-2 mb-2 mb-sm-0\">\n                    {/* Create Project Button */}\n                    <Nav.Link href=\"#\" id=\"nav-link-class\" data-bs-toggle=\"modal\" data-bs-target=\"#createModal\"><FontAwesomeIcon icon={faPlus} className=\"font-awesome-icons\" id=\"plus-icon\"/>&nbsp;Create Project</Nav.Link>\n\n                    {/* Create Project Modal */}\n                    <CreateModalComponent renderAgentProp={renderAgentProp} setRenderAgentProp={setRenderAgentProp}/>\n                    \n                    {/* Github Repository Link Button */}\n                    <Nav.Link href=\"https://github.com/kimanicharles911/emmethub_github_projects_react_and_express_fullstack\" target=\"_blank\" id=\"nav-link-class\"><FontAwesomeIcon icon={faGithub} className=\"font-awesome-icons\" id=\"github-icon\"/>&nbsp;GitHub</Nav.Link>\n                  </ul>\n                </Nav>\n              </Row>\n            </Container>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </>\n  )\n};\n\nexport default NavbarComponent;\n\n/* \n  * I created a Navbar component.\n  * I then passed then destructured the renderAgentProp and setRenderAgentProp received from the App component.\n  * I then created the navbar JSX that heavily relies on bootstrap and react-bootstrap libraries.\n  * The first major JSX item is the Create Project Button that is used to open the Create Project Modal.\n  * The only wrapped component is the CreateModalComponent. I pass the renderAgentProp and setRenderAgentProp to it also.\n  * The second major JSX item is the Github Repository Link Button that redirects the user to this Application's source code repository.\n*/","import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTrash, faPen, faEye } from '@fortawesome/free-solid-svg-icons';\nimport './MainComponent.css';\nimport {useEffect, useState} from 'react';\nimport {ViewModalComponent, EditModalComponent, DeleteModalComponent} from '../components';\n\n/* \n  * I imported the FontAwesomeIcon component, faTrash, faPen and faEye icons which are all products of the font-awesome library.\n  * I imported the css style file i.e MainComponent.css\n  * I then imported the useEffect & useState hook from react.\n  * I imported the ViewModalComponent, EditModalComponent and DeleteModalComponent from the components folder.\n*/\n\nconst MainComponent = ({renderAgentProp, setRenderAgentProp}) => {\n  const [repositories, setRepositories] = useState([]);\n  const [modalData, setModalData] = useState({\n    repoId: '',\n    repoName: '',\n    repoDescription: '',\n    repoUrl: '',\n    repoWebsiteUrl: '',\n    repoTopics: '',\n    repoBranches: '',\n    repoCommits: '',\n    repoHasLicense: '',\n    repoHasReadme: '',\n  });\n\n  useEffect(() => {\n    (async () => {\n      let dataArr;\n      try{\n        const response = await fetch('https://emmethubgithubprojectsapi.cyclic.app/api');\n        dataArr = await response.json();\n      }catch(errors){\n        console.error(errors);\n        dataArr = [];\n      }\n      setRepositories(dataArr);\n    })();\n  }, [renderAgentProp]);\n  \n  const repoNameReceiverFunc = (selectedRepoName) => {\n    for(const repo of repositories){\n      if(repo.name === selectedRepoName){\n        setModalData({\n          repoId: repo.id,\n          repoName: repo.name,\n          repoDescription: repo.description,\n          repoUrl: repo.url,\n          repoWebsiteUrl: repo.website_url,\n          repoTopics: repo.topics,\n          repoBranches: repo.branches,\n          repoCommits: repo.commits,\n          repoHasLicense: repo.has_license,\n          repoHasReadme: repo.has_readme,\n        })\n      }\n    }\n  };\n\n  /* \n    * I created the MainComponent and destructured the renderAgentProp and setRenderAgentProp.\n    * I created a state variable called repositories and setRepositories and set it's default value to an empty array. It is where all repositories from the API will be stored.\n    * I created a state variable called modalData and setModalData and set it's default value to an object whose keys are empty strings. It is where all the repository data of the project the user is interacting with is stored.\n    * I used a useEffect hook to fetch data from the backend API when the application starts and when there is a change in the boolean value of the renderAgentProp.\n    * I created the repoNameReceiverFunc function which receives the project name of the project the user is interacting with and then all of the data of that project is stored in the modalData state variable.   \n  */\n\n  return(\n    <main className=\"container fluid\">\n      <section className=\"row justify-content-md-start mt-3 mb-3 gy-3\">\n        {/* Repositories array Map function */}\n        {repositories.map((repository, index) => (\n          <div className=\"col-sm-4\" key={index}>\n            <div className=\"card mb-3\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{repository.name}</h5>\n                <p className=\"card-text\">{repository.description}</p>\n                <div className=\"buttons d-flex flex-row-reverse\">\n                  {/* <== Delete Button ==> */}\n                  <a title=\"Delete\" href=\"#delete\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#deleteModal\" onClick={() => repoNameReceiverFunc(repository.name)}><FontAwesomeIcon icon={faTrash} className=\"font-awesome-icons\" id=\"trash-icon\"/><i className=\"fas fa-trash-alt\"></i></a>\n                  {/* <== Edit Button ==> */}\n                  <a title=\"Edit\" href=\"#edit\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#editModal\" onClick={() => repoNameReceiverFunc(repository.name)}><FontAwesomeIcon icon={faPen} className=\"font-awesome-icons\" id=\"pen-icon\"/></a>\n                  {/* <== View Button ==> */}\n                  <a title=\"View\" href=\"#view\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#viewModal\" onClick={() => repoNameReceiverFunc(repository.name)}><FontAwesomeIcon icon={faEye} className=\"font-awesome-icons\" id=\"eye-icon\"/></a>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))\n        }\n\n        <ViewModalComponent modalDataProp={modalData}/>\n        <EditModalComponent modalDataProp={modalData} setModalDataProp={setModalData} repositoriesProp={repositories} setRepositoriesProp={setRepositories} renderAgentProp={renderAgentProp} setRenderAgentProp={setRenderAgentProp}/>\n        <DeleteModalComponent modalDataProp={modalData} renderAgentProp={renderAgentProp} setRenderAgentProp={setRenderAgentProp}/>\n      </section>\n    </main>\n  )\n};\nexport default MainComponent;\n/* \n  * I wrote the JSX for the main part of the application.\n  * The main function in the application is a map function that creates bootstrap cards with the name and description of each repository it loops through. \n  * The other main JSX items are the Delete, Edit and View Buttons which are used to open their respective modals. They also send the repository name to the repoNameReceiverFunc function so as to enable identification of the project the user is interacting with.\n  * I then wrapped the other three main components i.e ViewModalComponent, EditModalComponent and DeleteModalComponent.\n  * In each of the above components I passed the props needed for the modal to operate as expected.\n*/","import './ViewModalComponent.css';\n// I imported the styling from ViewModalComponent.css\n\nconst ViewModalComponent = ({modalDataProp}) => {\n\n  return (\n    <div className=\"modal py-5\" id=\"viewModal\" tabIndex=\"-1\" aria-labelledby=\"viewModalLabel\" aria-hidden=\"true\">\n      <div className=\"modal-dialog modal-dialog-scrollable\">\n        <div className=\"modal-content shadow\">\n          <div className=\"modal-header p-5\" id=\"view-modal-header\">\n            <h4 className=\"fw-bold mb-0 container-fluid\">{modalDataProp.repoName}</h4>\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div className=\"modal-body pt-0\">\n            <h5 className=\"mb-0\">Description</h5>\n            <p>{modalDataProp.repoDescription}</p>\n            <h5 className=\"mb-0\">Repository Link</h5>\n            <a href={modalDataProp.repoUrl} className=\"links\"><p>{modalDataProp.repoUrl}</p></a>\n            <h5 className=\"mb-0\">Website</h5>\n            <a href={modalDataProp.repoWebsiteUrl === 'N/A' ? '#' : modalDataProp.repoWebsiteUrl} className=\"links\"><p>{modalDataProp.repoWebsiteUrl}</p></a>\n            <div className=\"mb-2\">\n              <h5 className=\"mb-0 set-inline\">Topics:</h5>\n              <p className=\"set-inline\">{Object.keys(modalDataProp.repoTopics).map((topic) => ` ${modalDataProp.repoTopics[topic]} `)}</p>\n            </div>\n            <div className=\"mb-2\">\n              <h5 className=\"mb-0 set-inline\">Branches:</h5>\n              <p className=\"set-inline mb-3\">{Object.keys(modalDataProp.repoBranches).map((branch) => ` ${modalDataProp.repoBranches[branch]} `)}</p>\n            </div>\n            <div className=\"mb-2\">\n              <h5 className=\"mb-0 set-inline\">Commits:</h5>\n              <p className=\"set-inline\"> {modalDataProp.repoCommits}</p>\n            </div>\n            <div className=\"mb-2\">\n              <h5 className=\"mb-0 set-inline\">Licensed:</h5>\n              <p className=\"set-inline\"> {modalDataProp.repoHasLicense === true ? \"Yes\" : \"No\"}</p>\n            </div>\n            <div className=\"mb-3\">\n              <h5 className=\"mb-0 set-inline\">Has Readme:</h5>\n              <p className=\"set-inline\"> {modalDataProp.repoHasReadme === true ? \"Yes\" : \"No\"}</p>\n            </div>\n            <button type=\"button\" className=\"btn btn-lg btn-primary w-100\" data-bs-dismiss=\"modal\">Great, thanks!</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\nexport default ViewModalComponent;\n/* \n  => I created the ViewModalComponent and destructured the modalDataProp received from the MainModalComponent\n  => This modal has 9 major JSX items:\n      * The description. It is set from the repoDescription modalDataProp object value.\n      * The repository link. It is set from the repoUrl modalDataProp object value.\n      * The website. It is set from the repoWebsiteUrl modalDataProp object values.\n      * The topics. It is set from the repoTopics modalDataProp object value.\n      * The branches. It is set from the repoBranches modalDataProp object value.\n      * The commits. It is set from the repoCommits modalDataProp object value.\n      * The licensed. It is set from the repoHasLicense modalDataProp object value.\n      * The Has Readme. It is set from the repoHasReadme modalDataProp object value.\n      * The Great, thanks! button. It is used to close the view modal.\n*/","import './EditModalComponent.css';\nimport {faTimesCircle} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {useState} from 'react';\nimport axios from 'axios';\nimport {axiosErrorMessage, axiosResponseMessage, objectCreator} from '../../modules';\n\n/* \n  * I first imported the styling\n  * I imported the faTimesCircle from the font-awesome library\n  * I imported the FontAwesomeIcon library from the font-awesome library\n  * I then imported the useState hook from react.\n  * I imported the axios promise based http client.\n  * I imported custom axios and the objectCreator modules.\n*/\n\nconst EditModalComponent = ({modalDataProp, setModalDataProp, renderAgentProp, setRenderAgentProp}) => {\n\n  const [newTopic, setNewTopic] = useState(\"\");\n  const [newBranch, setNewBranch] = useState(\"\");\n\n  const repoNameChangeHandler = (event) => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoName: event.target.value\n      }\n    })\n  };\n\n  const repoDescriptionChangeHandler = (event) => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoDescription: event.target.value\n      }\n    })\n  };\n\n  const repoUrlChangeHandler = (event) => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoUrl: event.target.value\n      }\n    })\n  };\n\n  const repoWebsiteUrlChangeHandler = (event) => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoWebsiteUrl: event.target.value\n      }\n    })\n  };\n\n  const repoTopicsChangeHandler = (selectedRepoTopic) => {\n    const arr = modalDataProp.repoTopics.filter(repoTopic => repoTopic !== selectedRepoTopic);\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoTopics: arr\n      }\n    })\n  };\n\n  const addTopicChangeHandler = (event) => {\n    setNewTopic(event.target.value);\n  };\n\n  const addTopicBtnHandler = () => {\n    if(newTopic.match(/[A-Za-z0-9_]/)) {\n      setModalDataProp((prevState) => {\n        return {\n          ...prevState,\n          repoTopics: [...modalDataProp.repoTopics, newTopic]\n        }\n      })\n      setNewTopic(\"\");\n    }\n  };\n\n  const repoBranchesChangeHandler = (selectedRepoBranch) => {\n    const arr = modalDataProp.repoBranches.filter(repoBranch => repoBranch !== selectedRepoBranch);\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoBranches: arr\n      }\n    })\n  };\n\n  const addBranchChangeHandler = (event) => {\n    setNewBranch(event.target.value);\n  };\n\n  const addBranchBtnHandler = () => {\n    if(newBranch.match(/[A-Za-z0-9_]/)) {\n      setModalDataProp((prevState) => {\n        return {\n          ...prevState,\n          repoBranches: [...modalDataProp.repoBranches, newBranch]\n        }\n      })\n      setNewBranch(\"\");\n    }\n  };\n\n  const repoCommitsChangeHandler = (event) => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoCommits: event.target.value\n      }\n    })\n  };\n\n  const repoHasLicenseChangeHandler = () => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoHasLicense: !modalDataProp.repoHasLicense\n      }\n    })\n  };\n\n  const repoHasReadmeChangeHandler = () => {\n    setModalDataProp((prevState) => {\n      return {\n        ...prevState,\n        repoHasReadme: !modalDataProp.repoHasReadme\n      }\n    })\n  };\n\n  const saveChangesBtnHandler = async() => {\n    const newObject = objectCreator.moduleFunc(modalDataProp);\n    await axios.put(`https://emmethubgithubprojectsapi.cyclic.app/api/repository?id=${modalDataProp.repoId}`, newObject)\n      .then(res => {\n        axiosResponseMessage.moduleFunc(res);\n      }).catch(err => {\n        axiosErrorMessage.moduleFunc(err);\n      })\n      \n    setTimeout(() => {\n      setRenderAgentProp(!renderAgentProp);\n    }, 250);\n  }\n\n  /* \n    * I created the EditModalComponent and destructured the modalDataProp, setModalDataProp, renderAgentProp and setRenderAgentProp passed from the MainModalComponent.\n    * I then created a state variable called newTopic and setNewTopic and set it's default value to an empty string. It will be used to store the newest topic added by the user.\n    * I then created a state variable called newBranch and setNewBranch and set it's default value to an empty string. It will be used to store the newest branch added by the user.\n    * I created event handler functions for handling different kind of events. Most of this functions use setState callback functions to update the modalDataProp state variable. This are:\n        * The repoNameChangeHandler which updates the project name in the modalDataProp variable.\n        * The repoDescriptionChangeHandler which updates the project description in the modalDataProp variable.\n        * The repoUrlChangeHandler which updates the project repository link in the modalDataProp variable.\n        * The repoWebsiteUrlChangeHandler which updates the project website URL in the modalDataProp variable.\n        * The repoTopicsChangeHandler which removes the deleted topic from the existing array of topics in the project.\n        * The addTopicChangeHandler which stores a new topic the user wants to add to the project in the newTopic state variable.\n        * The addTopicBtnHandler which adds the newTopic entered by the user into the existing array of topics in the project and then sets the value of the newTopic state variable to an empty string.        \n        * The repoBranchesChangeHandler which removes the deleted branch from the existing array of branches in the project.\n        * The addBranchChangeHandler which stores a new branch the user wants to add to the project in the newBranch state variable.\n        * The addBranchBtnHandler which adds the newBranch entered by the user into the existing array of branches in the project and then sets the value of the newBranch state variable to an empty string.        \n        * The repoCommitsChangeHandler which updates the project commits in the modalDataProp variable.\n        * The repoHasLicenseChangeHandler which updates the project license availability in the modalDataProp variable\n        * The repoHasReadmeChangeHandler which updates the project read me availability in the modalDataProp variable\n        * The saveChangesBtnHandler function which has an object whose value is received from the objectCreator module.\n    * The axios function has a try catch block that returns necessary responses in either case of a successful or failed update to the API using the axiosResponseMessage and axiosErrorMessage modules.\n    * After 250 ms the boolean value of the setRenderAgentProp state variable is changed causing a fetch from the API that updates the projects data in the whole application.\n  */\n\n  return (\n    <div className=\"modal\" id=\"editModal\" tabIndex=\"-1\" aria-labelledby=\"editModalLabel\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n          <div className=\"modal-content shadow\">\n            <div className=\"modal-header pl-5 pr-5\" id=\"edit-modal-header\">\n              <p className=\"h4 fw-bold mb-0 container-fluid\">{modalDataProp.repoName}</p>\n              <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n            <div className=\"modal-body pl-5 pr-5 pt-0\">\n              <form>\n                <div className=\"form-floating mb-3\">\n                  <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingProjectName\" placeholder=\"Project Name\" value={modalDataProp.repoName} onChange={repoNameChangeHandler}/>\n                  <label htmlFor=\"floatingProjectName\">Project Name</label>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <textarea className=\"form-control rounded-4\" id=\"floatingTextArea\" placeholder=\"Description\" value={modalDataProp.repoDescription} onChange={repoDescriptionChangeHandler}></textarea>\n                  <label htmlFor=\"floatingTextArea\">Description</label>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingRepoUrl\" placeholder=\"Repository Link\" value={modalDataProp.repoUrl} onChange={repoUrlChangeHandler}/>\n                  <label htmlFor=\"floatingRepoUrl\">Repository Link</label>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingWebsiteUrl\" placeholder=\"Website\" value={modalDataProp.repoWebsiteUrl} onChange={repoWebsiteUrlChangeHandler}/>\n                  <label htmlFor=\"floatingWebsiteUrl\">Website</label>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <div className=\"card\" id=\"card-id\">\n                    <div className=\"card-body\">\n                        {modalDataProp.repoTopics.length < 1 ? \"No topics found\": Object.keys(modalDataProp.repoTopics).map((topic, index) => \n                          <span key={index}>\n                            <span className=\"badge rounded-pill bg-secondary\">\n                              {modalDataProp.repoTopics[topic]}\n                              <FontAwesomeIcon className=\"cancel-icon\" icon={faTimesCircle} onClick={() => repoTopicsChangeHandler(modalDataProp.repoTopics[topic])}/>\n                              </span>&nbsp;\n                          </span>\n                        )}\n                        <div className=\"input-group mt-2\">\n                          <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingTopics\" placeholder=\"Add a topic\" aria-label=\"Add a topic\" aria-describedby=\"topic-addon\" value={newTopic} onChange={addTopicChangeHandler}/>\n                          <span className=\"input-group-text bg-primary text-white\" id=\"topic-addon\" onClick={addTopicBtnHandler}>Add</span>\n                        </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <div className=\"card\" id=\"card-id\">\n                    <div className=\"card-body\">\n                        {modalDataProp.repoBranches.length < 1 ? \"No branches found\": Object.keys(modalDataProp.repoBranches).map((branch, index) => \n                          <span key={index}>\n                            <span className=\"badge rounded-pill bg-secondary\">\n                              {modalDataProp.repoBranches[branch]}\n                              <FontAwesomeIcon className=\"cancel-icon\" icon={faTimesCircle} onClick={() => repoBranchesChangeHandler(modalDataProp.repoBranches[branch])}/>\n                              </span>&nbsp;\n                          </span>\n                        )}\n                        <div className=\"input-group mt-2\">\n                          <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingBranches\" placeholder=\"Add a branch\" aria-label=\"Add a branch\" aria-describedby=\"branch-addon\" value={newBranch} onChange={addBranchChangeHandler}/>\n                          <span className=\"input-group-text bg-primary text-white\" id=\"branch-addon\" onClick={addBranchBtnHandler}>Add</span>\n                        </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <input type=\"number\" className=\"form-control rounded-4\" id=\"floatingCommits\" placeholder=\"Commits\"  value={modalDataProp.repoCommits} onChange={repoCommitsChangeHandler}/>\n                  <label htmlFor=\"floatingCommits\">Commits</label>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <div className=\"form-check form-check-inline\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" checked={modalDataProp.repoHasLicense === true} onChange={repoHasLicenseChangeHandler}/>\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Licensed</label>\n                  </div>\n                  <div className=\"form-check form-check-inline\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" checked={modalDataProp.repoHasLicense === false} onChange={repoHasLicenseChangeHandler}/>\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Not Licensed</label>\n                  </div>\n                </div>\n                <div className=\"form-floating mb-3\">\n                  <div className=\"form-check form-check-inline\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions2\" id=\"inlineRadio3\" checked={modalDataProp.repoHasReadme === true} onChange={repoHasReadmeChangeHandler}/>\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">Has ReadMe</label>\n                  </div>\n                  <div className=\"form-check form-check-inline\">\n                    <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions2\" id=\"inlineRadio4\" checked={modalDataProp.repoHasReadme === false} onChange={repoHasReadmeChangeHandler}/>\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio4\">No ReadMe</label>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n              <button type=\"button\" className=\"btn btn-primary\" data-bs-dismiss=\"modal\" onClick={saveChangesBtnHandler}>Save changes</button>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n};\nexport default EditModalComponent;\n\n/* \n  => This modal has 14 major JSX items which all use two way binding of the value and onChange attributes:\n      * The project name input. It is set from the repoName modalDataProp object value and calls the repoNameChangeHandler function on change.\n      * The project description input. It is set from the repoDescription modalDataProp object value and calls the repoDescriptionChangeHandler function on change.\n      * The project repository link input. It is set from the repoUrl modalDataProp object value and calls the repoUrlChangeHandler function on change.\n      * The project website input. It is set from the repoWebsiteUrl modalDataProp object value and calls the repoWebsiteUrlChangeHandler function on change.\n      * The project topics badges. They are set from the repoTopics modalDataProp object array values and call the repoTopicsChangeHandler function on change.\n      * The project topic input. It is set from the newTopic state variable and calls the addTopicChangeHandler function on change.\n      * The button for adding topics which calls the addTopicBtnHandler function on click.\n      * The project branches badges. They are set from the repoBranches modalDataProp object array values and call the repoBranchesChangeHandler function on change.\n      * The project branch input. It is set from the newBranch state variable and calls the addBranchChangeHandler function on change.\n      * The button for adding branches which calls the addBranchBtnHandler function on click.\n      * The project commits input. It is set from the repoCommits modalDataProp object value and calls the repoCommitsChangeHandler function on change.\n      * The project has license radio buttons. One radio button is turned on if it's boolean condition is true using the repoHasLicense modalDataProp object value. On change they call the repoHasLicenseChangeHandler function.\n      * The project has read me radio buttons. One radio button is turned on if it's boolean condition is true using the repoHasReadme modalDataProp object value. On change they call the repoHasReadmeChangeHandler function.\n      * The Save Changes button. It is used to call the saveChangesBtnHandler function that makes sure the edited project changes are saved.\n*/\n\n/* \nREFERENCES\n==========>\n* Obtained regex from: https://stackoverflow.com/a/336269/9497346\n* Learnt to make PUT requests from: https://www.cluemediator.com/put-request-using-axios-with-react-hooks\n* Learnt to make PUT requests from: https://youtu.be/9KaMsGSxGno \n*/","import {faTimesCircle} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {useState} from 'react';\nimport axios from 'axios';\nimport './CreateModalComponent.css';\nimport {axiosErrorMessage, axiosResponseMessage, objectCreator} from '../../modules';\n\n/* \n  * I first imported the faTimesCircle from the font-awesome library\n  * I imported the FontAwesomeIcon library from the font-awesome library\n  * I then imported the useState hook from react.\n  * I imported the axios promise based http client.\n  * I then imported the styling\n  * I imported custom axios and the objectCreator modules.\n*/\n\nconst CreateModalComponent = ({renderAgentProp, setRenderAgentProp}) => {\n\n  const [field, setField] = useState({\n    repoName: '',\n    repoDescription: '',\n    repoUrl: '',\n    repoWebsiteUrl: '',\n    repoTopics: [],\n    repoBranches: [],\n    repoCommits: 0,\n    repoHasLicense: false,\n    repoHasReadme: false,\n  });\n  const [newTopic, setNewTopic] = useState(\"\");\n  const [newBranch, setNewBranch] = useState(\"\");\n\n  const createRepoNameChangeHandler = (event) => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoName: event.target.value\n      }\n    })\n  };\n\n  const createRepoDescriptionChangeHandler = (event) => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoDescription: event.target.value\n      }\n    })\n  };\n\n  const createRepoUrlChangeHandler = (event) => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoUrl: event.target.value\n      }\n    })\n  };\n\n  const createRepoWebsiteUrlChangeHandler = (event) => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoWebsiteUrl: event.target.value\n      }\n    })\n  };\n\n  const repoTopicsChangeHandler = (selectedRepoTopic) => {\n    const arr = field.repoTopics.filter(repoTopic => repoTopic !== selectedRepoTopic);\n    setField((prevState) => {\n      return {\n        ...prevState,\n        repoTopics: arr\n      }\n    })\n  };\n\n  const addTopicChangeHandler = (event) => {\n    setNewTopic(event.target.value);\n  };\n\n  const addTopicBtnHandler = () => {\n    if(newTopic.match(/[A-Za-z0-9_]/)) {\n      setField((prevState) => {\n        return {\n          ...prevState,\n          repoTopics: [...field.repoTopics, newTopic]\n        }\n      })\n      setNewTopic(\"\");\n    }\n  };\n\n  const repoBranchesChangeHandler = (selectedRepoBranch) => {\n    const arr = field.repoBranches.filter(repoBranch => repoBranch !== selectedRepoBranch);\n    setField((prevState) => {\n      return {\n        ...prevState,\n        repoBranches: arr\n      }\n    })\n  };\n\n  const addBranchChangeHandler = (event) => {\n    setNewBranch(event.target.value);\n  };\n\n  const addBranchBtnHandler = () => {\n    if(newBranch.match(/[A-Za-z0-9_]/)) {\n      setField((prevState) => {\n        return {\n          ...prevState,\n          repoBranches: [...field.repoBranches, newBranch]\n        }\n      })\n      setNewBranch(\"\");\n    }\n  };\n\n  const createRepoCommitsChangeHandler = (event) => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoCommits: event.target.value\n      }\n    })\n  };\n\n  const createRepoHasLicenseChangeHandler = () => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoHasLicense: !field.repoHasLicense\n      }\n    })\n  };\n\n  const createRepoHasReadmeChangeHandler = () => {\n    setField((prevState) => {\n      return{\n        ...prevState,\n        repoHasReadme: !field.repoHasReadme\n      }\n    })\n  };\n\n  const createProjectBtnHandler = async() => {\n    const newObject = objectCreator.moduleFunc(field);\n    await axios.post('https://emmethubgithubprojectsapi.cyclic.app/api/repositories/new', newObject)\n      .then(res => {\n        axiosResponseMessage.moduleFunc(res);\n      }).catch(err => {\n        axiosErrorMessage.moduleFunc(err);\n      })\n    \n    setField({\n      repoName: '',\n      repoDescription: '',\n      repoUrl: '',\n      repoWebsiteUrl: '',\n      repoTopics: [],\n      repoBranches: [],\n      repoCommits: 0,\n      repoHasLicense: false,\n      repoHasReadme: false,\n    })\n      \n    setTimeout(() => {\n      setRenderAgentProp(!renderAgentProp);\n    }, 250);\n  };\n\n  /* \n    * I created the CreateModalComponent and destructured the renderAgentProp and setRenderAgentProp passed from the NavbarComponent.\n    * I created a state variable called field and setField and set it's default value to an object whose keys are empty strings, empty arrays and false booleans. It is where all the data from the create project form input fields will be stored.\n    * I then created a state variable called newTopic and setNewTopic and set it's default value to an empty string. It will be used to store the newest topic added by the user.\n    * I then created a state variable called newBranch and setNewBranch and set it's default value to an empty string. It will be used to store the newest branch added by the user.\n    * I created event handler functions for handling different kind of events. Most of this functions use setState callback functions to set the field state variable. This are:\n        * The createRepoNameChangeHandler which stores the new project name in the field variable.\n        * The createRepoDescriptionChangeHandler which stores the new project description in the field variable.\n        * The createRepoUrlChangeHandler which stores the new project repository link in the field variable.\n        * The createRepoWebsiteUrlChangeHandler which stores the new project website URL in the field variable.\n        * The repoTopicsChangeHandler which removes the deleted topic from the existing array of topics in the project.\n        * The addTopicChangeHandler which stores a new topic the user wants to add to the project in the newTopic state variable.\n        * The addTopicBtnHandler which adds the newTopic entered by the user into the existing array of topics in the project and then stores the value of the newTopic state variable to an empty string.        \n        * The repoBranchesChangeHandler which removes the deleted branch from the existing array of branches in the project.\n        * The addBranchChangeHandler which stores a new branch the user wants to add to the project in the newBranch state variable.\n        * The addBranchBtnHandler which adds the newBranch entered by the user into the existing array of branches in the project and then stores the value of the newBranch state variable to an empty string.        \n        * The createRepoCommitsChangeHandler which stores the new project commits in the field variable.\n        * The createRepoHasLicenseChangeHandler which stores the new project license availability boolean in the field variable\n        * The createRepoHasReadmeChangeHandler which stores the new project read me availability boolean in the field variable\n        * The createProjectBtnHandler function which has an object whose value is received from the objectCreator module.\n    * The axios function has a try catch block that returns necessary responses in either case of a successful or failed project creation in the API using the axiosResponseMessage and axiosErrorMessage modules.\n    * After 250 ms the boolean value of the setRenderAgentProp state variable is changed causing a fetch from the API that updates the projects data in the whole application.\n  */\n\n  return (\n    <div className=\"modal\" id=\"createModal\" tabIndex=\"-1\" aria-labelledby=\"createModalLabel\" aria-hidden=\"true\"> \n      <div className=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n        <div className=\"modal-content shadow\">\n          <div className=\"modal-header pl-5 pr-5\" id=\"create-modal-header\">\n            <p className=\"h4 fw-bold mb-0 container-fluid\">New Project</p>\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div className=\"modal-body pl-5 pr-5 pt-0\">\n            <form>\n              <div className=\"form-floating mb-3\">\n                <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingCreateProjectName\" value={field.repoName} onChange={createRepoNameChangeHandler} placeholder=\"Project Name\" />\n                <label htmlFor=\"floatingCreateProjectName\">Project Name</label>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <textarea className=\"form-control rounded-4\" id=\"floatingCreateTextArea\" placeholder=\"Description\" value={field.repoDescription} onChange={createRepoDescriptionChangeHandler}></textarea>\n                <label htmlFor=\"floatingCreateTextArea\">Description</label>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingCreateRepoUrl\" placeholder=\"Repository Link\" value={field.repoUrl} onChange={createRepoUrlChangeHandler}/>\n                <label htmlFor=\"floatingCreateRepoUrl\">Repository Link</label>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingCreateWebsiteUrl\" placeholder=\"Website\" value={field.repoWebsiteUrl} onChange={createRepoWebsiteUrlChangeHandler}/>\n                <label htmlFor=\"floatingCreateWebsiteUrl\">Website</label>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <div className=\"card\" id=\"card-id\">\n                  <div className=\"card-body\">\n                        {field.repoTopics.length < 1 ? \"No topics added\": Object.keys(field.repoTopics).map((topic, index) => \n                          <span key={index}>\n                            <span className=\"badge rounded-pill bg-secondary\">\n                              {field.repoTopics[topic]}\n                              <FontAwesomeIcon className=\"cancel-icon\" icon={faTimesCircle} onClick={() => repoTopicsChangeHandler(field.repoTopics[topic])}/>\n                              </span>&nbsp;\n                          </span>\n                        )}\n                      <div className=\"input-group mt-2\">\n                        <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingTopics\" placeholder=\"Add a topic\" aria-label=\"Add a topic\" aria-describedby=\"topic-addon\" value={newTopic} onChange={addTopicChangeHandler}/>\n                        <span className=\"input-group-text bg-primary text-white\" id=\"topic-addon\" onClick={addTopicBtnHandler}>Add</span>\n                      </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <div className=\"card\" id=\"card-id\">\n                  <div className=\"card-body\">\n                        {field.repoBranches.length < 1 ? \"No branches added\": Object.keys(field.repoBranches).map((branch, index) => \n                          <span key={index}>\n                            <span className=\"badge rounded-pill bg-secondary\">\n                              {field.repoBranches[branch]}\n                              <FontAwesomeIcon className=\"cancel-icon\" icon={faTimesCircle} onClick={() => repoBranchesChangeHandler(field.repoBranches[branch])}/>\n                              </span>&nbsp;\n                          </span>\n                        )}\n                      <div className=\"input-group mt-2\">\n                        <input type=\"text\" className=\"form-control rounded-4\" id=\"floatingBranches\" placeholder=\"Add a branch\" aria-label=\"Add a branch\" aria-describedby=\"branch-addon\" value={newBranch} onChange={addBranchChangeHandler}/>\n                        <span className=\"input-group-text bg-primary text-white\" id=\"branch-addon\" onClick={addBranchBtnHandler}>Add</span>\n                      </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <input type=\"number\" className=\"form-control rounded-4\" id=\"floatingCreateCommits\" placeholder=\"Commits\"  value={field.repoCommits} onChange={createRepoCommitsChangeHandler}/>\n                <label htmlFor=\"floatingCreateCommits\">Commits</label>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <div className=\"form-check form-check-inline\">\n                  <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions\" id=\"createInlineRadio1\" checked={field.repoHasLicense === true} onChange={createRepoHasLicenseChangeHandler}/>\n                  <label className=\"form-check-label\" htmlFor=\"createInlineRadio1\">Licensed</label>\n                </div>\n                <div className=\"form-check form-check-inline\">\n                  <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions\" id=\"createInlineRadio2\" checked={field.repoHasLicense === false} onChange={createRepoHasLicenseChangeHandler}/>\n                  <label className=\"form-check-label\" htmlFor=\"createInlineRadio2\">Not Licensed</label>\n                </div>\n              </div>\n              <div className=\"form-floating mb-3\">\n                <div className=\"form-check form-check-inline\">\n                  <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions2\" id=\"createInlineRadio3\" checked={field.repoHasReadme === true} onChange={createRepoHasReadmeChangeHandler}/>\n                  <label className=\"form-check-label\" htmlFor=\"createInlineRadio3\">Has ReadMe</label>\n                </div>\n                <div className=\"form-check form-check-inline\">\n                  <input type=\"radio\" className=\"form-check-input\" name=\"inlineRadioOptions2\" id=\"createInlineRadio4\" checked={field.repoHasReadme === false} onChange={createRepoHasReadmeChangeHandler}/>\n                  <label className=\"form-check-label\" htmlFor=\"createInlineRadio4\">No ReadMe</label>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n            <button type=\"button\" className=\"btn btn-primary\" data-bs-dismiss=\"modal\" onClick={createProjectBtnHandler}>Create Project</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CreateModalComponent;\n\n/* \n  => This modal has 14 major JSX items which all use two way binding of the value and onChange attributes:\n      * The project name input. It is set from the repoName field object value and calls the createRepoNameChangeHandler function on change.\n      * The project description input. It is set from the repoDescription field object value and calls the createRepoDescriptionChangeHandler function on change.\n      * The project repository link input. It is set from the repoUrl field object value and calls the createRepoUrlChangeHandler function on change.\n      * The project website input. It is set from the repoWebsiteUrl field object value and calls the createRepoWebsiteUrlChangeHandler function on change.\n      * The project topics badges. They are set from the repoTopics field object array values and call the repoTopicsChangeHandler function on change.\n      * The project topic input. It is set from the newTopic state variable and calls the addTopicChangeHandler function on change.\n      * The button for adding topics which calls the addTopicBtnHandler function on click.\n      * The project branches badges. They are set from the repoBranches field object array values and call the repoBranchesChangeHandler function on change.\n      * The project branch input. It is set from the newBranch state variable and calls the addBranchChangeHandler function on change.\n      * The button for adding branches which calls the addBranchBtnHandler function on click.\n      * The project commits input. It is set from the repoCommits field object value and calls the createRepoCommitsChangeHandler function on change.\n      * The project has license radio buttons. One radio button is turned on if it's boolean condition is true using the repoHasLicense field object value. On change they call the createRepoHasLicenseChangeHandler function.\n      * The project has read me radio buttons. One radio button is turned on if it's boolean condition is true using the repoHasReadme field object value. On change they call the createRepoHasReadmeChangeHandler function.\n      * The Create Project button. It is used to call the createProjectBtnHandler function that makes sure the new project is created and saved.\n*/\n\n/* \nREFERENCES\n==========>\n* Obtained regex from: https://stackoverflow.com/a/336269/9497346\n*/","import axios from 'axios';\nimport {axiosErrorMessage, axiosResponseMessage} from '../../modules';\n/* \n  * I imported the axios promise based http client. \n  * I imported custom axios modules.\n*/\n\nconst DeleteModalComponent = ({modalDataProp, renderAgentProp, setRenderAgentProp}) => {\n\n  const deleteProjectBtnHandler = async() => {\n    await axios.delete(`https://emmethubgithubprojectsapi.cyclic.app/api/repository?id=${modalDataProp.repoId}`)\n      .then(res => {\n        axiosResponseMessage.moduleFunc(res);\n      }).catch(err => {\n        axiosErrorMessage.moduleFunc(err);\n      })\n\n    setTimeout(() => {\n      setRenderAgentProp(!renderAgentProp);\n    }, 250)\n  }\n\n  /* \n    * I created the DeleteModalComponent and destructured the modalDataProp, renderAgentProp and setRenderAgentProp passed from the MainComponent.\n    * The deleteProjectBtnHandler which deletes the project the user has chosen to delete from the API.\n    * The axios function has a try catch block that returns necessary responses in either case of a successful or failed project deletion in the API using the axiosResponseMessage and axiosErrorMessage modules.\n    * After 250 ms the boolean value of the setRenderAgentProp state variable is changed causing a fetch from the API that updates the projects data in the whole application.\n  */\n\n  return (\n    <div className=\"modal\" id=\"deleteModal\" tabIndex=\"-1\" aria-labelledby=\"deleteModalLabel\" aria-hidden=\"true\">\n      <div className=\"modal-dialog modal-dialog-centered\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"deleteModalLabel\">Delete Confirmation</h5>\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div className=\"modal-body\">\n            <p className=\"text-center\">Are you sure you want to permanently delete {modalDataProp.repoName} ?</p>                    \n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n            <button type=\"button\" className=\"btn btn-danger\" data-bs-dismiss=\"modal\" onClick={deleteProjectBtnHandler}>Proceed to Delete</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default DeleteModalComponent;\n/* \n  => This modal has 2 major JSX items:\n    * The deleting message which shows the user the project they want to delete.\n    * The proceed to delete button which when clicked calls the deleteProjectBtnHandler function that deletes the project.\n*/","import './App.css';\nimport {NavbarComponent, MainComponent} from './components';\nimport {useState} from 'react';\n\nconst App = () => {\n\n  const [renderAgent, setRenderAgent] = useState(false);\n\n  return (\n    <>\n      <NavbarComponent renderAgentProp={renderAgent} setRenderAgentProp={setRenderAgent}/>\n      <MainComponent renderAgentProp={renderAgent} setRenderAgentProp={setRenderAgent}/>\n    </>\n  );\n}\n\nexport default App;\n\n/* \n  * I first imported the navbar and main components from the components folder.\n  * I then imported the useState hook from react.\n  * I then changed the App component from using a normal function to an arrow function.\n  * I then created a state variable called renderAgent and setRenderAgent and set it's default value to false. \n  * The purpose of the renderAgent state is to trigger the useEffect hook in the main component to include the changes made by a user by fetching the API afresh.\n  * I then wrapped the navbar and main components in an empty fragment.\n  * I then passed the renderAgent & setRenderAgent state variables to the NavbarComponent and MainComponent as props.\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// I imported bootstrap from the bootstrap library\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// I imported bootstrap JS plugin from the bootstrap library\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","exports.moduleFunc = (err) => {\n  console.error(`Something went wrong!`, err);\n  console.error(`Error Message`, err.response);\n};\n\n// I created an axios error message module function that returns the error and error response.","exports.moduleFunc = (res) => {\n  console.log(`Status:`, res.status);\n  console.log(`Data`, res.data);\n};\n\n// I created an axios success message module function that returns the status and data properties of the response.","exports.moduleFunc = (receivedObject) => {\n  const newObject = {\n    \"id\": receivedObject.repoId,\n    \"name\": receivedObject.repoName,\n    \"description\": receivedObject.repoDescription,\n    \"url\": receivedObject.repoUrl,\n    \"website_url\": receivedObject.repoWebsiteUrl,\n    \"topics\": receivedObject.repoTopics,\n    \"branches\": receivedObject.repoBranches,\n    \"commits\": receivedObject.repoCommits,\n    \"has_license\": receivedObject.repoHasLicense,\n    \"has_readme\": receivedObject.repoHasReadme\n  };\n  \n  return newObject;\n};\n/* \n  * I created a module function that creates an object with similar keys to those of the API to store the respective values which are taken by axios that updates the API with the new project details.\n  * It returns the object.\n*/"],"sourceRoot":""}